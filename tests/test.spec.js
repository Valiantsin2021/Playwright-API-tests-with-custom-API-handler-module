import { test, expect } from '@fixture/fixture'
const baseUrl = process.env.BASE_URL
const apiUrl = process.env.API_URL
const token = process.env.TOKEN
const osaka = process.env.OSAKA
const tokio = process.env.TOKIO
const favoritesMessage = process.env.FAVORITES_MESSAGE
const email = process.env.EMAIL
const password = process.env.PASSWORD
let id, favoriteId
test.describe.serial(`Airports:`, async () => {
  test(`GET airports`, async ({ api }) => {
    const response = await api.getReq(baseUrl)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data[0].id).toBe('GKA')
    expect(body.data[0].type).toBe('airport')
    expect(body.data[0].attributes.name).toBe('Goroka Airport')
    expect(body.data[0].attributes.city).toBe('Goroka')
    expect(body.data[0].attributes.country).toBe('Papua New Guinea')
    expect(body.data[0].attributes.iata).toBe('GKA')
    expect(body.data[0].attributes.icao).toBe('AYGA')
    expect(body.data[0].attributes.latitude).toBe('-6.08169')
    expect(body.data[0].attributes.longitude).toBe('145.391998')
    expect(body.data[0].attributes.altitude).toBe(5282)
    expect(body.data[0].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[1].id).toBe('MAG')
    expect(body.data[1].type).toBe('airport')
    expect(body.data[1].attributes.name).toBe('Madang Airport')
    expect(body.data[1].attributes.city).toBe('Madang')
    expect(body.data[1].attributes.country).toBe('Papua New Guinea')
    expect(body.data[1].attributes.iata).toBe('MAG')
    expect(body.data[1].attributes.icao).toBe('AYMD')
    expect(body.data[1].attributes.latitude).toBe('-5.20708')
    expect(body.data[1].attributes.longitude).toBe('145.789001')
    expect(body.data[1].attributes.altitude).toBe(20)
    expect(body.data[1].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[2].id).toBe('HGU')
    expect(body.data[2].type).toBe('airport')
    expect(body.data[2].attributes.name).toBe('Mount Hagen Kagamuga Airport')
    expect(body.data[2].attributes.city).toBe('Mount Hagen')
    expect(body.data[2].attributes.country).toBe('Papua New Guinea')
    expect(body.data[2].attributes.iata).toBe('HGU')
    expect(body.data[2].attributes.icao).toBe('AYMH')
    expect(body.data[2].attributes.latitude).toBe('-5.82679')
    expect(body.data[2].attributes.longitude).toBe('144.296005')
    expect(body.data[2].attributes.altitude).toBe(5388)
    expect(body.data[2].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[3].id).toBe('LAE')
    expect(body.data[3].type).toBe('airport')
    expect(body.data[3].attributes.name).toBe('Nadzab Airport')
    expect(body.data[3].attributes.city).toBe('Nadzab')
    expect(body.data[3].attributes.country).toBe('Papua New Guinea')
    expect(body.data[3].attributes.iata).toBe('LAE')
    expect(body.data[3].attributes.icao).toBe('AYNZ')
    expect(body.data[3].attributes.latitude).toBe('-6.569803')
    expect(body.data[3].attributes.longitude).toBe('146.725977')
    expect(body.data[3].attributes.altitude).toBe(239)
    expect(body.data[3].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[4].id).toBe('POM')
    expect(body.data[4].type).toBe('airport')
    expect(body.data[4].attributes.name).toBe('Port Moresby Jacksons International Airport')
    expect(body.data[4].attributes.city).toBe('Port Moresby')
    expect(body.data[4].attributes.country).toBe('Papua New Guinea')
    expect(body.data[4].attributes.iata).toBe('POM')
    expect(body.data[4].attributes.icao).toBe('AYPY')
    expect(body.data[4].attributes.latitude).toBe('-9.44338')
    expect(body.data[4].attributes.longitude).toBe('147.220001')
    expect(body.data[4].attributes.altitude).toBe(146)
    expect(body.data[4].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[5].id).toBe('WWK')
    expect(body.data[5].type).toBe('airport')
    expect(body.data[5].attributes.name).toBe('Wewak International Airport')
    expect(body.data[5].attributes.city).toBe('Wewak')
    expect(body.data[5].attributes.country).toBe('Papua New Guinea')
    expect(body.data[5].attributes.iata).toBe('WWK')
    expect(body.data[5].attributes.icao).toBe('AYWK')
    expect(body.data[5].attributes.latitude).toBe('-3.58383')
    expect(body.data[5].attributes.longitude).toBe('143.669006')
    expect(body.data[5].attributes.altitude).toBe(19)
    expect(body.data[5].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[6].id).toBe('UAK')
    expect(body.data[6].type).toBe('airport')
    expect(body.data[6].attributes.name).toBe('Narsarsuaq Airport')
    expect(body.data[6].attributes.city).toBe('Narssarssuaq')
    expect(body.data[6].attributes.country).toBe('Greenland')
    expect(body.data[6].attributes.iata).toBe('UAK')
    expect(body.data[6].attributes.icao).toBe('BGBW')
    expect(body.data[6].attributes.latitude).toBe('61.1605')
    expect(body.data[6].attributes.longitude).toBe('-45.425999')
    expect(body.data[6].attributes.altitude).toBe(112)
    expect(body.data[6].attributes.timezone).toBe('America/Godthab')
    expect(body.data[7].id).toBe('GOH')
    expect(body.data[7].type).toBe('airport')
    expect(body.data[7].attributes.name).toBe('Godthaab / Nuuk Airport')
    expect(body.data[7].attributes.city).toBe('Godthaab')
    expect(body.data[7].attributes.country).toBe('Greenland')
    expect(body.data[7].attributes.iata).toBe('GOH')
    expect(body.data[7].attributes.icao).toBe('BGGH')
    expect(body.data[7].attributes.latitude).toBe('64.190903')
    expect(body.data[7].attributes.longitude).toBe('-51.678101')
    expect(body.data[7].attributes.altitude).toBe(283)
    expect(body.data[7].attributes.timezone).toBe('America/Godthab')
    expect(body.data[8].id).toBe('SFJ')
    expect(body.data[8].type).toBe('airport')
    expect(body.data[8].attributes.name).toBe('Kangerlussuaq Airport')
    expect(body.data[8].attributes.city).toBe('Sondrestrom')
    expect(body.data[8].attributes.country).toBe('Greenland')
    expect(body.data[8].attributes.iata).toBe('SFJ')
    expect(body.data[8].attributes.icao).toBe('BGSF')
    expect(body.data[8].attributes.latitude).toBe('67.012222')
    expect(body.data[8].attributes.longitude).toBe('-50.711603')
    expect(body.data[8].attributes.altitude).toBe(165)
    expect(body.data[8].attributes.timezone).toBe('America/Godthab')
    expect(body.data[9].id).toBe('THU')
    expect(body.data[9].type).toBe('airport')
    expect(body.data[9].attributes.name).toBe('Thule Air Base')
    expect(body.data[9].attributes.city).toBe('Thule')
    expect(body.data[9].attributes.country).toBe('Greenland')
    expect(body.data[9].attributes.iata).toBe('THU')
    expect(body.data[9].attributes.icao).toBe('BGTL')
    expect(body.data[9].attributes.latitude).toBe('76.531197')
    expect(body.data[9].attributes.longitude).toBe('-68.703201')
    expect(body.data[9].attributes.altitude).toBe(251)
    expect(body.data[9].attributes.timezone).toBe('America/Thule')
    expect(body.data[10].id).toBe('AEY')
    expect(body.data[10].type).toBe('airport')
    expect(body.data[10].attributes.name).toBe('Akureyri Airport')
    expect(body.data[10].attributes.city).toBe('Akureyri')
    expect(body.data[10].attributes.country).toBe('Iceland')
    expect(body.data[10].attributes.iata).toBe('AEY')
    expect(body.data[10].attributes.icao).toBe('BIAR')
    expect(body.data[10].attributes.latitude).toBe('65.660004')
    expect(body.data[10].attributes.longitude).toBe('-18.072701')
    expect(body.data[10].attributes.altitude).toBe(6)
    expect(body.data[10].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[11].id).toBe('EGS')
    expect(body.data[11].type).toBe('airport')
    expect(body.data[11].attributes.name).toBe('Egilsstaðir Airport')
    expect(body.data[11].attributes.city).toBe('Egilsstadir')
    expect(body.data[11].attributes.country).toBe('Iceland')
    expect(body.data[11].attributes.iata).toBe('EGS')
    expect(body.data[11].attributes.icao).toBe('BIEG')
    expect(body.data[11].attributes.latitude).toBe('65.283302')
    expect(body.data[11].attributes.longitude).toBe('-14.4014')
    expect(body.data[11].attributes.altitude).toBe(76)
    expect(body.data[11].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[12].id).toBe('HFN')
    expect(body.data[12].type).toBe('airport')
    expect(body.data[12].attributes.name).toBe('Hornafjörður Airport')
    expect(body.data[12].attributes.city).toBe('Hofn')
    expect(body.data[12].attributes.country).toBe('Iceland')
    expect(body.data[12].attributes.iata).toBe('HFN')
    expect(body.data[12].attributes.icao).toBe('BIHN')
    expect(body.data[12].attributes.latitude).toBe('64.295601')
    expect(body.data[12].attributes.longitude).toBe('-15.2272')
    expect(body.data[12].attributes.altitude).toBe(24)
    expect(body.data[12].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[13].id).toBe('HZK')
    expect(body.data[13].type).toBe('airport')
    expect(body.data[13].attributes.name).toBe('Húsavík Airport')
    expect(body.data[13].attributes.city).toBe('Husavik')
    expect(body.data[13].attributes.country).toBe('Iceland')
    expect(body.data[13].attributes.iata).toBe('HZK')
    expect(body.data[13].attributes.icao).toBe('BIHU')
    expect(body.data[13].attributes.latitude).toBe('65.952301')
    expect(body.data[13].attributes.longitude).toBe('-17.426001')
    expect(body.data[13].attributes.altitude).toBe(48)
    expect(body.data[13].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[14].id).toBe('IFJ')
    expect(body.data[14].type).toBe('airport')
    expect(body.data[14].attributes.name).toBe('Ísafjörður Airport')
    expect(body.data[14].attributes.city).toBe('Isafjordur')
    expect(body.data[14].attributes.country).toBe('Iceland')
    expect(body.data[14].attributes.iata).toBe('IFJ')
    expect(body.data[14].attributes.icao).toBe('BIIS')
    expect(body.data[14].attributes.latitude).toBe('66.058098')
    expect(body.data[14].attributes.longitude).toBe('-23.1353')
    expect(body.data[14].attributes.altitude).toBe(8)
    expect(body.data[14].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[15].id).toBe('KEF')
    expect(body.data[15].type).toBe('airport')
    expect(body.data[15].attributes.name).toBe('Keflavik International Airport')
    expect(body.data[15].attributes.city).toBe('Keflavik')
    expect(body.data[15].attributes.country).toBe('Iceland')
    expect(body.data[15].attributes.iata).toBe('KEF')
    expect(body.data[15].attributes.icao).toBe('BIKF')
    expect(body.data[15].attributes.latitude).toBe('63.985001')
    expect(body.data[15].attributes.longitude).toBe('-22.6056')
    expect(body.data[15].attributes.altitude).toBe(171)
    expect(body.data[15].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[16].id).toBe('PFJ')
    expect(body.data[16].type).toBe('airport')
    expect(body.data[16].attributes.name).toBe('Patreksfjörður Airport')
    expect(body.data[16].attributes.city).toBe('Patreksfjordur')
    expect(body.data[16].attributes.country).toBe('Iceland')
    expect(body.data[16].attributes.iata).toBe('PFJ')
    expect(body.data[16].attributes.icao).toBe('BIPA')
    expect(body.data[16].attributes.latitude).toBe('65.555801')
    expect(body.data[16].attributes.longitude).toBe('-23.965')
    expect(body.data[16].attributes.altitude).toBe(11)
    expect(body.data[16].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[17].id).toBe('RKV')
    expect(body.data[17].type).toBe('airport')
    expect(body.data[17].attributes.name).toBe('Reykjavik Airport')
    expect(body.data[17].attributes.city).toBe('Reykjavik')
    expect(body.data[17].attributes.country).toBe('Iceland')
    expect(body.data[17].attributes.iata).toBe('RKV')
    expect(body.data[17].attributes.icao).toBe('BIRK')
    expect(body.data[17].attributes.latitude).toBe('64.129997')
    expect(body.data[17].attributes.longitude).toBe('-21.940599')
    expect(body.data[17].attributes.altitude).toBe(48)
    expect(body.data[17].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[18].id).toBe('SIJ')
    expect(body.data[18].type).toBe('airport')
    expect(body.data[18].attributes.name).toBe('Siglufjörður Airport')
    expect(body.data[18].attributes.city).toBe('Siglufjordur')
    expect(body.data[18].attributes.country).toBe('Iceland')
    expect(body.data[18].attributes.iata).toBe('SIJ')
    expect(body.data[18].attributes.icao).toBe('BISI')
    expect(body.data[18].attributes.latitude).toBe('66.133301')
    expect(body.data[18].attributes.longitude).toBe('-18.9167')
    expect(body.data[18].attributes.altitude).toBe(10)
    expect(body.data[18].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[19].id).toBe('VEY')
    expect(body.data[19].type).toBe('airport')
    expect(body.data[19].attributes.name).toBe('Vestmannaeyjar Airport')
    expect(body.data[19].attributes.city).toBe('Vestmannaeyjar')
    expect(body.data[19].attributes.country).toBe('Iceland')
    expect(body.data[19].attributes.iata).toBe('VEY')
    expect(body.data[19].attributes.icao).toBe('BIVM')
    expect(body.data[19].attributes.latitude).toBe('63.424301')
    expect(body.data[19].attributes.longitude).toBe('-20.2789')
    expect(body.data[19].attributes.altitude).toBe(326)
    expect(body.data[19].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[20].id).toBe('YAM')
    expect(body.data[20].type).toBe('airport')
    expect(body.data[20].attributes.name).toBe('Sault Ste Marie Airport')
    expect(body.data[20].attributes.city).toBe('Sault Sainte Marie')
    expect(body.data[20].attributes.country).toBe('Canada')
    expect(body.data[20].attributes.iata).toBe('YAM')
    expect(body.data[20].attributes.icao).toBe('CYAM')
    expect(body.data[20].attributes.latitude).toBe('46.485001')
    expect(body.data[20].attributes.longitude).toBe('-84.509399')
    expect(body.data[20].attributes.altitude).toBe(630)
    expect(body.data[20].attributes.timezone).toBe('America/Toronto')
    expect(body.data[21].id).toBe('YAY')
    expect(body.data[21].type).toBe('airport')
    expect(body.data[21].attributes.name).toBe('St. Anthony Airport')
    expect(body.data[21].attributes.city).toBe('St. Anthony')
    expect(body.data[21].attributes.country).toBe('Canada')
    expect(body.data[21].attributes.iata).toBe('YAY')
    expect(body.data[21].attributes.icao).toBe('CYAY')
    expect(body.data[21].attributes.latitude).toBe('51.391899')
    expect(body.data[21].attributes.longitude).toBe('-56.083099')
    expect(body.data[21].attributes.altitude).toBe(108)
    expect(body.data[21].attributes.timezone).toBe('America/St_Johns')
    expect(body.data[22].id).toBe('YAZ')
    expect(body.data[22].type).toBe('airport')
    expect(body.data[22].attributes.name).toBe('Tofino / Long Beach Airport')
    expect(body.data[22].attributes.city).toBe('Tofino')
    expect(body.data[22].attributes.country).toBe('Canada')
    expect(body.data[22].attributes.iata).toBe('YAZ')
    expect(body.data[22].attributes.icao).toBe('CYAZ')
    expect(body.data[22].attributes.latitude).toBe('49.079833')
    expect(body.data[22].attributes.longitude).toBe('-125.775583')
    expect(body.data[22].attributes.altitude).toBe(80)
    expect(body.data[22].attributes.timezone).toBe('America/Vancouver')
    expect(body.data[23].id).toBe('YBB')
    expect(body.data[23].type).toBe('airport')
    expect(body.data[23].attributes.name).toBe('Kugaaruk Airport')
    expect(body.data[23].attributes.city).toBe('Pelly Bay')
    expect(body.data[23].attributes.country).toBe('Canada')
    expect(body.data[23].attributes.iata).toBe('YBB')
    expect(body.data[23].attributes.icao).toBe('CYBB')
    expect(body.data[23].attributes.latitude).toBe('68.534401')
    expect(body.data[23].attributes.longitude).toBe('-89.808098')
    expect(body.data[23].attributes.altitude).toBe(56)
    expect(body.data[23].attributes.timezone).toBe('America/Edmonton')
    expect(body.data[24].id).toBe('YBC')
    expect(body.data[24].type).toBe('airport')
    expect(body.data[24].attributes.name).toBe('Baie Comeau Airport')
    expect(body.data[24].attributes.city).toBe('Baie Comeau')
    expect(body.data[24].attributes.country).toBe('Canada')
    expect(body.data[24].attributes.iata).toBe('YBC')
    expect(body.data[24].attributes.icao).toBe('CYBC')
    expect(body.data[24].attributes.latitude).toBe('49.1325')
    expect(body.data[24].attributes.longitude).toBe('-68.204399')
    expect(body.data[24].attributes.altitude).toBe(71)
    expect(body.data[24].attributes.timezone).toBe('America/Toronto')
    expect(body.data[25].id).toBe('YBG')
    expect(body.data[25].type).toBe('airport')
    expect(body.data[25].attributes.name).toBe('CFB Bagotville')
    expect(body.data[25].attributes.city).toBe('Bagotville')
    expect(body.data[25].attributes.country).toBe('Canada')
    expect(body.data[25].attributes.iata).toBe('YBG')
    expect(body.data[25].attributes.icao).toBe('CYBG')
    expect(body.data[25].attributes.latitude).toBe('48.330601')
    expect(body.data[25].attributes.longitude).toBe('-70.996399')
    expect(body.data[25].attributes.altitude).toBe(522)
    expect(body.data[25].attributes.timezone).toBe('America/Toronto')
    expect(body.data[26].id).toBe('YBK')
    expect(body.data[26].type).toBe('airport')
    expect(body.data[26].attributes.name).toBe('Baker Lake Airport')
    expect(body.data[26].attributes.city).toBe('Baker Lake')
    expect(body.data[26].attributes.country).toBe('Canada')
    expect(body.data[26].attributes.iata).toBe('YBK')
    expect(body.data[26].attributes.icao).toBe('CYBK')
    expect(body.data[26].attributes.latitude).toBe('64.298897')
    expect(body.data[26].attributes.longitude).toBe('-96.077797')
    expect(body.data[26].attributes.altitude).toBe(59)
    expect(body.data[26].attributes.timezone).toBe('America/Winnipeg')
    expect(body.data[27].id).toBe('YBL')
    expect(body.data[27].type).toBe('airport')
    expect(body.data[27].attributes.name).toBe('Campbell River Airport')
    expect(body.data[27].attributes.city).toBe('Campbell River')
    expect(body.data[27].attributes.country).toBe('Canada')
    expect(body.data[27].attributes.iata).toBe('YBL')
    expect(body.data[27].attributes.icao).toBe('CYBL')
    expect(body.data[27].attributes.latitude).toBe('49.950802')
    expect(body.data[27].attributes.longitude).toBe('-125.271004')
    expect(body.data[27].attributes.altitude).toBe(346)
    expect(body.data[27].attributes.timezone).toBe('America/Vancouver')
    expect(body.data[28].id).toBe('YBR')
    expect(body.data[28].type).toBe('airport')
    expect(body.data[28].attributes.name).toBe('Brandon Municipal Airport')
    expect(body.data[28].attributes.city).toBe('Brandon')
    expect(body.data[28].attributes.country).toBe('Canada')
    expect(body.data[28].attributes.iata).toBe('YBR')
    expect(body.data[28].attributes.icao).toBe('CYBR')
    expect(body.data[28].attributes.latitude).toBe('49.91')
    expect(body.data[28].attributes.longitude).toBe('-99.951897')
    expect(body.data[28].attributes.altitude).toBe(1343)
    expect(body.data[28].attributes.timezone).toBe('America/Winnipeg')
    expect(body.data[29].id).toBe('YCB')
    expect(body.data[29].type).toBe('airport')
    expect(body.data[29].attributes.name).toBe('Cambridge Bay Airport')
    expect(body.data[29].attributes.city).toBe('Cambridge Bay')
    expect(body.data[29].attributes.country).toBe('Canada')
    expect(body.data[29].attributes.iata).toBe('YCB')
    expect(body.data[29].attributes.icao).toBe('CYCB')
    expect(body.data[29].attributes.latitude).toBe('69.108101')
    expect(body.data[29].attributes.longitude).toBe('-105.138')
    expect(body.data[29].attributes.altitude).toBe(90)
    expect(body.data[29].attributes.timezone).toBe('America/Edmonton')
    expect(body.links.first).toBe('https://airportgap.com/api/airports')
    expect(body.links.self).toBe('https://airportgap.com/api/airports')
    expect(body.links.last).toBe('https://airportgap.com/api/airports?page=203')
    expect(body.links.prev).toBe('https://airportgap.com/api/airports')
    expect(body.links.next).toBe('https://airportgap.com/api/airports?page=2')
    expect(body.data[0].id).toBe('GKA')
    expect(body.data[0].type).toBe('airport')
    expect(body.data[0].attributes.name).toBe('Goroka Airport')
    expect(body.data[0].attributes.city).toBe('Goroka')
    expect(body.data[0].attributes.country).toBe('Papua New Guinea')
    expect(body.data[0].attributes.iata).toBe('GKA')
    expect(body.data[0].attributes.icao).toBe('AYGA')
    expect(body.data[0].attributes.latitude).toBe('-6.08169')
    expect(body.data[0].attributes.longitude).toBe('145.391998')
    expect(body.data[0].attributes.altitude).toBe(5282)
    expect(body.data[0].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[1].id).toBe('MAG')
    expect(body.data[1].type).toBe('airport')
    expect(body.data[1].attributes.name).toBe('Madang Airport')
    expect(body.data[1].attributes.city).toBe('Madang')
    expect(body.data[1].attributes.country).toBe('Papua New Guinea')
    expect(body.data[1].attributes.iata).toBe('MAG')
    expect(body.data[1].attributes.icao).toBe('AYMD')
    expect(body.data[1].attributes.latitude).toBe('-5.20708')
    expect(body.data[1].attributes.longitude).toBe('145.789001')
    expect(body.data[1].attributes.altitude).toBe(20)
    expect(body.data[1].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[2].id).toBe('HGU')
    expect(body.data[2].type).toBe('airport')
    expect(body.data[2].attributes.name).toBe('Mount Hagen Kagamuga Airport')
    expect(body.data[2].attributes.city).toBe('Mount Hagen')
    expect(body.data[2].attributes.country).toBe('Papua New Guinea')
    expect(body.data[2].attributes.iata).toBe('HGU')
    expect(body.data[2].attributes.icao).toBe('AYMH')
    expect(body.data[2].attributes.latitude).toBe('-5.82679')
    expect(body.data[2].attributes.longitude).toBe('144.296005')
    expect(body.data[2].attributes.altitude).toBe(5388)
    expect(body.data[2].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[3].id).toBe('LAE')
    expect(body.data[3].type).toBe('airport')
    expect(body.data[3].attributes.name).toBe('Nadzab Airport')
    expect(body.data[3].attributes.city).toBe('Nadzab')
    expect(body.data[3].attributes.country).toBe('Papua New Guinea')
    expect(body.data[3].attributes.iata).toBe('LAE')
    expect(body.data[3].attributes.icao).toBe('AYNZ')
    expect(body.data[3].attributes.latitude).toBe('-6.569803')
    expect(body.data[3].attributes.longitude).toBe('146.725977')
    expect(body.data[3].attributes.altitude).toBe(239)
    expect(body.data[3].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[4].id).toBe('POM')
    expect(body.data[4].type).toBe('airport')
    expect(body.data[4].attributes.name).toBe('Port Moresby Jacksons International Airport')
    expect(body.data[4].attributes.city).toBe('Port Moresby')
    expect(body.data[4].attributes.country).toBe('Papua New Guinea')
    expect(body.data[4].attributes.iata).toBe('POM')
    expect(body.data[4].attributes.icao).toBe('AYPY')
    expect(body.data[4].attributes.latitude).toBe('-9.44338')
    expect(body.data[4].attributes.longitude).toBe('147.220001')
    expect(body.data[4].attributes.altitude).toBe(146)
    expect(body.data[4].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[5].id).toBe('WWK')
    expect(body.data[5].type).toBe('airport')
    expect(body.data[5].attributes.name).toBe('Wewak International Airport')
    expect(body.data[5].attributes.city).toBe('Wewak')
    expect(body.data[5].attributes.country).toBe('Papua New Guinea')
    expect(body.data[5].attributes.iata).toBe('WWK')
    expect(body.data[5].attributes.icao).toBe('AYWK')
    expect(body.data[5].attributes.latitude).toBe('-3.58383')
    expect(body.data[5].attributes.longitude).toBe('143.669006')
    expect(body.data[5].attributes.altitude).toBe(19)
    expect(body.data[5].attributes.timezone).toBe('Pacific/Port_Moresby')
    expect(body.data[6].id).toBe('UAK')
    expect(body.data[6].type).toBe('airport')
    expect(body.data[6].attributes.name).toBe('Narsarsuaq Airport')
    expect(body.data[6].attributes.city).toBe('Narssarssuaq')
    expect(body.data[6].attributes.country).toBe('Greenland')
    expect(body.data[6].attributes.iata).toBe('UAK')
    expect(body.data[6].attributes.icao).toBe('BGBW')
    expect(body.data[6].attributes.latitude).toBe('61.1605')
    expect(body.data[6].attributes.longitude).toBe('-45.425999')
    expect(body.data[6].attributes.altitude).toBe(112)
    expect(body.data[6].attributes.timezone).toBe('America/Godthab')
    expect(body.data[7].id).toBe('GOH')
    expect(body.data[7].type).toBe('airport')
    expect(body.data[7].attributes.name).toBe('Godthaab / Nuuk Airport')
    expect(body.data[7].attributes.city).toBe('Godthaab')
    expect(body.data[7].attributes.country).toBe('Greenland')
    expect(body.data[7].attributes.iata).toBe('GOH')
    expect(body.data[7].attributes.icao).toBe('BGGH')
    expect(body.data[7].attributes.latitude).toBe('64.190903')
    expect(body.data[7].attributes.longitude).toBe('-51.678101')
    expect(body.data[7].attributes.altitude).toBe(283)
    expect(body.data[7].attributes.timezone).toBe('America/Godthab')
    expect(body.data[8].id).toBe('SFJ')
    expect(body.data[8].type).toBe('airport')
    expect(body.data[8].attributes.name).toBe('Kangerlussuaq Airport')
    expect(body.data[8].attributes.city).toBe('Sondrestrom')
    expect(body.data[8].attributes.country).toBe('Greenland')
    expect(body.data[8].attributes.iata).toBe('SFJ')
    expect(body.data[8].attributes.icao).toBe('BGSF')
    expect(body.data[8].attributes.latitude).toBe('67.012222')
    expect(body.data[8].attributes.longitude).toBe('-50.711603')
    expect(body.data[8].attributes.altitude).toBe(165)
    expect(body.data[8].attributes.timezone).toBe('America/Godthab')
    expect(body.data[9].id).toBe('THU')
    expect(body.data[9].type).toBe('airport')
    expect(body.data[9].attributes.name).toBe('Thule Air Base')
    expect(body.data[9].attributes.city).toBe('Thule')
    expect(body.data[9].attributes.country).toBe('Greenland')
    expect(body.data[9].attributes.iata).toBe('THU')
    expect(body.data[9].attributes.icao).toBe('BGTL')
    expect(body.data[9].attributes.latitude).toBe('76.531197')
    expect(body.data[9].attributes.longitude).toBe('-68.703201')
    expect(body.data[9].attributes.altitude).toBe(251)
    expect(body.data[9].attributes.timezone).toBe('America/Thule')
    expect(body.data[10].id).toBe('AEY')
    expect(body.data[10].type).toBe('airport')
    expect(body.data[10].attributes.name).toBe('Akureyri Airport')
    expect(body.data[10].attributes.city).toBe('Akureyri')
    expect(body.data[10].attributes.country).toBe('Iceland')
    expect(body.data[10].attributes.iata).toBe('AEY')
    expect(body.data[10].attributes.icao).toBe('BIAR')
    expect(body.data[10].attributes.latitude).toBe('65.660004')
    expect(body.data[10].attributes.longitude).toBe('-18.072701')
    expect(body.data[10].attributes.altitude).toBe(6)
    expect(body.data[10].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[11].id).toBe('EGS')
    expect(body.data[11].type).toBe('airport')
    expect(body.data[11].attributes.name).toBe('Egilsstaðir Airport')
    expect(body.data[11].attributes.city).toBe('Egilsstadir')
    expect(body.data[11].attributes.country).toBe('Iceland')
    expect(body.data[11].attributes.iata).toBe('EGS')
    expect(body.data[11].attributes.icao).toBe('BIEG')
    expect(body.data[11].attributes.latitude).toBe('65.283302')
    expect(body.data[11].attributes.longitude).toBe('-14.4014')
    expect(body.data[11].attributes.altitude).toBe(76)
    expect(body.data[11].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[12].id).toBe('HFN')
    expect(body.data[12].type).toBe('airport')
    expect(body.data[12].attributes.name).toBe('Hornafjörður Airport')
    expect(body.data[12].attributes.city).toBe('Hofn')
    expect(body.data[12].attributes.country).toBe('Iceland')
    expect(body.data[12].attributes.iata).toBe('HFN')
    expect(body.data[12].attributes.icao).toBe('BIHN')
    expect(body.data[12].attributes.latitude).toBe('64.295601')
    expect(body.data[12].attributes.longitude).toBe('-15.2272')
    expect(body.data[12].attributes.altitude).toBe(24)
    expect(body.data[12].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[13].id).toBe('HZK')
    expect(body.data[13].type).toBe('airport')
    expect(body.data[13].attributes.name).toBe('Húsavík Airport')
    expect(body.data[13].attributes.city).toBe('Husavik')
    expect(body.data[13].attributes.country).toBe('Iceland')
    expect(body.data[13].attributes.iata).toBe('HZK')
    expect(body.data[13].attributes.icao).toBe('BIHU')
    expect(body.data[13].attributes.latitude).toBe('65.952301')
    expect(body.data[13].attributes.longitude).toBe('-17.426001')
    expect(body.data[13].attributes.altitude).toBe(48)
    expect(body.data[13].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[14].id).toBe('IFJ')
    expect(body.data[14].type).toBe('airport')
    expect(body.data[14].attributes.name).toBe('Ísafjörður Airport')
    expect(body.data[14].attributes.city).toBe('Isafjordur')
    expect(body.data[14].attributes.country).toBe('Iceland')
    expect(body.data[14].attributes.iata).toBe('IFJ')
    expect(body.data[14].attributes.icao).toBe('BIIS')
    expect(body.data[14].attributes.latitude).toBe('66.058098')
    expect(body.data[14].attributes.longitude).toBe('-23.1353')
    expect(body.data[14].attributes.altitude).toBe(8)
    expect(body.data[14].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[15].id).toBe('KEF')
    expect(body.data[15].type).toBe('airport')
    expect(body.data[15].attributes.name).toBe('Keflavik International Airport')
    expect(body.data[15].attributes.city).toBe('Keflavik')
    expect(body.data[15].attributes.country).toBe('Iceland')
    expect(body.data[15].attributes.iata).toBe('KEF')
    expect(body.data[15].attributes.icao).toBe('BIKF')
    expect(body.data[15].attributes.latitude).toBe('63.985001')
    expect(body.data[15].attributes.longitude).toBe('-22.6056')
    expect(body.data[15].attributes.altitude).toBe(171)
    expect(body.data[15].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[16].id).toBe('PFJ')
    expect(body.data[16].type).toBe('airport')
    expect(body.data[16].attributes.name).toBe('Patreksfjörður Airport')
    expect(body.data[16].attributes.city).toBe('Patreksfjordur')
    expect(body.data[16].attributes.country).toBe('Iceland')
    expect(body.data[16].attributes.iata).toBe('PFJ')
    expect(body.data[16].attributes.icao).toBe('BIPA')
    expect(body.data[16].attributes.latitude).toBe('65.555801')
    expect(body.data[16].attributes.longitude).toBe('-23.965')
    expect(body.data[16].attributes.altitude).toBe(11)
    expect(body.data[16].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[17].id).toBe('RKV')
    expect(body.data[17].type).toBe('airport')
    expect(body.data[17].attributes.name).toBe('Reykjavik Airport')
    expect(body.data[17].attributes.city).toBe('Reykjavik')
    expect(body.data[17].attributes.country).toBe('Iceland')
    expect(body.data[17].attributes.iata).toBe('RKV')
    expect(body.data[17].attributes.icao).toBe('BIRK')
    expect(body.data[17].attributes.latitude).toBe('64.129997')
    expect(body.data[17].attributes.longitude).toBe('-21.940599')
    expect(body.data[17].attributes.altitude).toBe(48)
    expect(body.data[17].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[18].id).toBe('SIJ')
    expect(body.data[18].type).toBe('airport')
    expect(body.data[18].attributes.name).toBe('Siglufjörður Airport')
    expect(body.data[18].attributes.city).toBe('Siglufjordur')
    expect(body.data[18].attributes.country).toBe('Iceland')
    expect(body.data[18].attributes.iata).toBe('SIJ')
    expect(body.data[18].attributes.icao).toBe('BISI')
    expect(body.data[18].attributes.latitude).toBe('66.133301')
    expect(body.data[18].attributes.longitude).toBe('-18.9167')
    expect(body.data[18].attributes.altitude).toBe(10)
    expect(body.data[18].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[19].id).toBe('VEY')
    expect(body.data[19].type).toBe('airport')
    expect(body.data[19].attributes.name).toBe('Vestmannaeyjar Airport')
    expect(body.data[19].attributes.city).toBe('Vestmannaeyjar')
    expect(body.data[19].attributes.country).toBe('Iceland')
    expect(body.data[19].attributes.iata).toBe('VEY')
    expect(body.data[19].attributes.icao).toBe('BIVM')
    expect(body.data[19].attributes.latitude).toBe('63.424301')
    expect(body.data[19].attributes.longitude).toBe('-20.2789')
    expect(body.data[19].attributes.altitude).toBe(326)
    expect(body.data[19].attributes.timezone).toBe('Atlantic/Reykjavik')
    expect(body.data[20].id).toBe('YAM')
    expect(body.data[20].type).toBe('airport')
    expect(body.data[20].attributes.name).toBe('Sault Ste Marie Airport')
    expect(body.data[20].attributes.city).toBe('Sault Sainte Marie')
    expect(body.data[20].attributes.country).toBe('Canada')
    expect(body.data[20].attributes.iata).toBe('YAM')
    expect(body.data[20].attributes.icao).toBe('CYAM')
    expect(body.data[20].attributes.latitude).toBe('46.485001')
    expect(body.data[20].attributes.longitude).toBe('-84.509399')
    expect(body.data[20].attributes.altitude).toBe(630)
    expect(body.data[20].attributes.timezone).toBe('America/Toronto')
    expect(body.data[21].id).toBe('YAY')
    expect(body.data[21].type).toBe('airport')
    expect(body.data[21].attributes.name).toBe('St. Anthony Airport')
    expect(body.data[21].attributes.city).toBe('St. Anthony')
    expect(body.data[21].attributes.country).toBe('Canada')
    expect(body.data[21].attributes.iata).toBe('YAY')
    expect(body.data[21].attributes.icao).toBe('CYAY')
    expect(body.data[21].attributes.latitude).toBe('51.391899')
    expect(body.data[21].attributes.longitude).toBe('-56.083099')
    expect(body.data[21].attributes.altitude).toBe(108)
    expect(body.data[21].attributes.timezone).toBe('America/St_Johns')
    expect(body.data[22].id).toBe('YAZ')
    expect(body.data[22].type).toBe('airport')
    expect(body.data[22].attributes.name).toBe('Tofino / Long Beach Airport')
    expect(body.data[22].attributes.city).toBe('Tofino')
    expect(body.data[22].attributes.country).toBe('Canada')
    expect(body.data[22].attributes.iata).toBe('YAZ')
    expect(body.data[22].attributes.icao).toBe('CYAZ')
    expect(body.data[22].attributes.latitude).toBe('49.079833')
    expect(body.data[22].attributes.longitude).toBe('-125.775583')
    expect(body.data[22].attributes.altitude).toBe(80)
    expect(body.data[22].attributes.timezone).toBe('America/Vancouver')
    expect(body.data[23].id).toBe('YBB')
    expect(body.data[23].type).toBe('airport')
    expect(body.data[23].attributes.name).toBe('Kugaaruk Airport')
    expect(body.data[23].attributes.city).toBe('Pelly Bay')
    expect(body.data[23].attributes.country).toBe('Canada')
    expect(body.data[23].attributes.iata).toBe('YBB')
    expect(body.data[23].attributes.icao).toBe('CYBB')
    expect(body.data[23].attributes.latitude).toBe('68.534401')
    expect(body.data[23].attributes.longitude).toBe('-89.808098')
    expect(body.data[23].attributes.altitude).toBe(56)
    expect(body.data[23].attributes.timezone).toBe('America/Edmonton')
    expect(body.data[24].id).toBe('YBC')
    expect(body.data[24].type).toBe('airport')
    expect(body.data[24].attributes.name).toBe('Baie Comeau Airport')
    expect(body.data[24].attributes.city).toBe('Baie Comeau')
    expect(body.data[24].attributes.country).toBe('Canada')
    expect(body.data[24].attributes.iata).toBe('YBC')
    expect(body.data[24].attributes.icao).toBe('CYBC')
    expect(body.data[24].attributes.latitude).toBe('49.1325')
    expect(body.data[24].attributes.longitude).toBe('-68.204399')
    expect(body.data[24].attributes.altitude).toBe(71)
    expect(body.data[24].attributes.timezone).toBe('America/Toronto')
    expect(body.data[25].id).toBe('YBG')
    expect(body.data[25].type).toBe('airport')
    expect(body.data[25].attributes.name).toBe('CFB Bagotville')
    expect(body.data[25].attributes.city).toBe('Bagotville')
    expect(body.data[25].attributes.country).toBe('Canada')
    expect(body.data[25].attributes.iata).toBe('YBG')
    expect(body.data[25].attributes.icao).toBe('CYBG')
    expect(body.data[25].attributes.latitude).toBe('48.330601')
    expect(body.data[25].attributes.longitude).toBe('-70.996399')
    expect(body.data[25].attributes.altitude).toBe(522)
    expect(body.data[25].attributes.timezone).toBe('America/Toronto')
    expect(body.data[26].id).toBe('YBK')
    expect(body.data[26].type).toBe('airport')
    expect(body.data[26].attributes.name).toBe('Baker Lake Airport')
    expect(body.data[26].attributes.city).toBe('Baker Lake')
    expect(body.data[26].attributes.country).toBe('Canada')
    expect(body.data[26].attributes.iata).toBe('YBK')
    expect(body.data[26].attributes.icao).toBe('CYBK')
    expect(body.data[26].attributes.latitude).toBe('64.298897')
    expect(body.data[26].attributes.longitude).toBe('-96.077797')
    expect(body.data[26].attributes.altitude).toBe(59)
    expect(body.data[26].attributes.timezone).toBe('America/Winnipeg')
    expect(body.data[27].id).toBe('YBL')
    expect(body.data[27].type).toBe('airport')
    expect(body.data[27].attributes.name).toBe('Campbell River Airport')
    expect(body.data[27].attributes.city).toBe('Campbell River')
    expect(body.data[27].attributes.country).toBe('Canada')
    expect(body.data[27].attributes.iata).toBe('YBL')
    expect(body.data[27].attributes.icao).toBe('CYBL')
    expect(body.data[27].attributes.latitude).toBe('49.950802')
    expect(body.data[27].attributes.longitude).toBe('-125.271004')
    expect(body.data[27].attributes.altitude).toBe(346)
    expect(body.data[27].attributes.timezone).toBe('America/Vancouver')
    expect(body.data[28].id).toBe('YBR')
    expect(body.data[28].type).toBe('airport')
    expect(body.data[28].attributes.name).toBe('Brandon Municipal Airport')
    expect(body.data[28].attributes.city).toBe('Brandon')
    expect(body.data[28].attributes.country).toBe('Canada')
    expect(body.data[28].attributes.iata).toBe('YBR')
    expect(body.data[28].attributes.icao).toBe('CYBR')
    expect(body.data[28].attributes.latitude).toBe('49.91')
    expect(body.data[28].attributes.longitude).toBe('-99.951897')
    expect(body.data[28].attributes.altitude).toBe(1343)
    expect(body.data[28].attributes.timezone).toBe('America/Winnipeg')
    expect(body.data[29].id).toBe('YCB')
    expect(body.data[29].type).toBe('airport')
    expect(body.data[29].attributes.name).toBe('Cambridge Bay Airport')
    expect(body.data[29].attributes.city).toBe('Cambridge Bay')
    expect(body.data[29].attributes.country).toBe('Canada')
    expect(body.data[29].attributes.iata).toBe('YCB')
    expect(body.data[29].attributes.icao).toBe('CYCB')
    expect(body.data[29].attributes.latitude).toBe('69.108101')
    expect(body.data[29].attributes.longitude).toBe('-105.138')
    expect(body.data[29].attributes.altitude).toBe(90)
    expect(body.data[29].attributes.timezone).toBe('America/Edmonton')
    expect(body.links.first).toBe('https://airportgap.com/api/airports')
    expect(body.links.self).toBe('https://airportgap.com/api/airports')
    expect(body.links.last).toBe('https://airportgap.com/api/airports?page=203')
    expect(body.links.prev).toBe('https://airportgap.com/api/airports')
    expect(body.links.next).toBe('https://airportgap.com/api/airports?page=2')
  })
  test(`GET Osaka airport response`, async ({ api }) => {
    const response = await api.getReq(`${baseUrl}/${osaka}`)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data.id).toBe(osaka)
    expect(body.data.type).toBe('airport')
    expect(body.data.attributes.name).toBe('Kansai International Airport')
    expect(body.data.attributes.city).toBe('Osaka')
    expect(body.data.attributes.country).toBe('Japan')
    expect(body.data.attributes.iata).toBe(osaka)
    expect(body.data.attributes.icao).toBe('RJBB')
    expect(body.data.attributes.latitude).toBe('34.427299')
    expect(body.data.attributes.longitude).toBe('135.244003')
    expect(body.data.attributes.altitude).toBe(26)
    expect(body.data.attributes.timezone).toBe('Asia/Tokyo')
  })
  test(`POST /airports/distance`, async ({ api }) => {
    const response = await api.postReq(`${baseUrl}/distance`, { from: osaka, to: tokio })
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data.id).toBe(`${osaka}-${tokio}`)
    expect(body.data.type).toBe('airport_distance')
    expect(body.data.attributes.from_airport.id).toBe(3158)
    expect(body.data.attributes.from_airport.name).toBe('Kansai International Airport')
    expect(body.data.attributes.from_airport.city).toBe('Osaka')
    expect(body.data.attributes.from_airport.country).toBe('Japan')
    expect(body.data.attributes.from_airport.iata).toBe(osaka)
    expect(body.data.attributes.from_airport.icao).toBe('RJBB')
    expect(body.data.attributes.from_airport.latitude).toBe('34.427299')
    expect(body.data.attributes.from_airport.longitude).toBe('135.244003')
    expect(body.data.attributes.from_airport.altitude).toBe(26)
    expect(body.data.attributes.from_airport.timezone).toBe('Asia/Tokyo')
    expect(body.data.attributes.to_airport.id).toBe(1721)
    expect(body.data.attributes.to_airport.name).toBe('Narita International Airport')
    expect(body.data.attributes.to_airport.city).toBe('Tokyo')
    expect(body.data.attributes.to_airport.country).toBe('Japan')
    expect(body.data.attributes.to_airport.iata).toBe(tokio)
    expect(body.data.attributes.to_airport.icao).toBe('RJAA')
    expect(body.data.attributes.to_airport.latitude).toBe('35.764702')
    expect(body.data.attributes.to_airport.longitude).toBe('140.386002')
    expect(body.data.attributes.to_airport.altitude).toBe(141)
    expect(body.data.attributes.to_airport.timezone).toBe('Asia/Tokyo')
    expect(body.data.attributes.kilometers).toBe(490.8053652969214)
    expect(body.data.attributes.miles).toBe(304.76001022047103)
    expect(body.data.attributes.nautical_miles).toBe(264.82908133654655)
  })
  test(`POST /airports/tokens`, async ({ api }) => {
    const response = await api.postReq(`${apiUrl}/tokens`, { email, password })
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.token).toEqual(token)
  })
  test(`GET /favorites`, async ({ api }) => {
    const response = await api.getReq(`${apiUrl}/favorites`, token)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data).toEqual([])
  })
  test(`POST /favorites`, async ({ api }) => {
    const response = await api.postReq(`${apiUrl}/favorites`, { airport_id: `${osaka}` }, token)
    expect(response.status()).toBe(201)
    const body = await response.json()
    expect(body.data.type).toBe('favorite')
    expect(body.data.attributes.airport.name).toBe('Kansai International Airport')
    expect(body.data.attributes.airport.city).toBe('Osaka')
    expect(body.data.attributes.airport.country).toBe('Japan')
    expect(body.data.attributes.airport.iata).toBe(osaka)
    expect(body.data.attributes.airport.icao).toBe('RJBB')
    expect(body.data.attributes.airport.latitude).toBe('34.427299')
    expect(body.data.attributes.airport.longitude).toBe('135.244003')
    expect(body.data.attributes.airport.altitude).toBe(26)
    expect(body.data.attributes.airport.timezone).toBe('Asia/Tokyo')
    expect(body.data.attributes.note).toBeNull()
    id = body.data.attributes.airport.id
  })
  test(`GET /favorites created`, async ({ api }) => {
    const response = await api.getReq(`${apiUrl}/favorites`, token)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data[0].type).toBe('favorite')
    expect(body.data[0].attributes.airport.name).toBe('Kansai International Airport')
    expect(body.data[0].attributes.airport.city).toBe('Osaka')
    expect(body.data[0].attributes.airport.country).toBe('Japan')
    expect(body.data[0].attributes.airport.iata).toBe(osaka)
    expect(body.data[0].attributes.airport.icao).toBe('RJBB')
    expect(body.data[0].attributes.airport.latitude).toBe('34.427299')
    expect(body.data[0].attributes.airport.longitude).toBe('135.244003')
    expect(body.data[0].attributes.airport.altitude).toBe(26)
    expect(body.data[0].attributes.airport.timezone).toBe('Asia/Tokyo')
    expect(body.data[0].attributes.note).toBeNull()
    favoriteId = body.data[0].id
  })
  test(`GET /favorites/:id`, async ({ api }) => {
    const response = await api.getReq(`${apiUrl}/favorites/${favoriteId}`, token)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data.type).toBe('favorite')
    expect(body.data.id).toBe(favoriteId)
    expect(body.data.attributes.airport.id).toBe(id)
    expect(body.data.attributes.airport.name).toBe('Kansai International Airport')
    expect(body.data.attributes.airport.city).toBe('Osaka')
    expect(body.data.attributes.airport.country).toBe('Japan')
    expect(body.data.attributes.airport.iata).toBe(osaka)
    expect(body.data.attributes.airport.icao).toBe('RJBB')
    expect(body.data.attributes.airport.latitude).toBe('34.427299')
    expect(body.data.attributes.airport.longitude).toBe('135.244003')
    expect(body.data.attributes.airport.altitude).toBe(26)
    expect(body.data.attributes.airport.timezone).toBe('Asia/Tokyo')
    expect(body.data.attributes.note).toBeNull()
  })
  test(`PATCH /airports/:id`, async ({ api }) => {
    const response = await api.patchReq(
      `${apiUrl}/favorites/${favoriteId}`,
      { airport_id: `${osaka}`, note: favoritesMessage },
      token
    )
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data.id).toBe(favoriteId)
    expect(body.data.type).toBe('favorite')
    expect(body.data.attributes.airport.id).toBe(id)
    expect(body.data.attributes.airport.name).toBe('Kansai International Airport')
    expect(body.data.attributes.airport.city).toBe('Osaka')
    expect(body.data.attributes.airport.country).toBe('Japan')
    expect(body.data.attributes.airport.iata).toBe(osaka)
    expect(body.data.attributes.airport.icao).toBe('RJBB')
    expect(body.data.attributes.airport.latitude).toBe('34.427299')
    expect(body.data.attributes.airport.longitude).toBe('135.244003')
    expect(body.data.attributes.airport.altitude).toBe(26)
    expect(body.data.attributes.airport.timezone).toBe('Asia/Tokyo')
    expect(body.data.attributes.note).toBe(favoritesMessage)
  })
  test(`GET /favorites patched`, async ({ api }) => {
    const response = await api.getReq(`${apiUrl}/favorites`, token)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data[0].type).toBe('favorite')
    expect(body.data[0].id).toBe(favoriteId)
    expect(body.data[0].attributes.airport.id).toBe(id)
    expect(body.data[0].attributes.airport.name).toBe('Kansai International Airport')
    expect(body.data[0].attributes.airport.city).toBe('Osaka')
    expect(body.data[0].attributes.airport.country).toBe('Japan')
    expect(body.data[0].attributes.airport.iata).toBe(osaka)
    expect(body.data[0].attributes.airport.icao).toBe('RJBB')
    expect(body.data[0].attributes.airport.latitude).toBe('34.427299')
    expect(body.data[0].attributes.airport.longitude).toBe('135.244003')
    expect(body.data[0].attributes.airport.altitude).toBe(26)
    expect(body.data[0].attributes.airport.timezone).toBe('Asia/Tokyo')
    expect(body.data[0].attributes.note).toBe(favoritesMessage)
  })
  test(`DELETE /favorites/:id`, async ({ api }) => {
    const response = await api.deleteReq(`${apiUrl}/favorites/${favoriteId}`, token)
    expect(response.status()).toBe(204)
  })
  test(`GET /favorites after delete`, async ({ api }) => {
    const response = await api.getReq(`${apiUrl}/favorites`, token)
    expect(response.status()).toBe(200)
    const body = await response.json()
    expect(body.data).toEqual([])
  })
})
